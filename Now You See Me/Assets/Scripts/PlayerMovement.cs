using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Unity.Services.Analytics;
using Unity.Services.Core;

public class PlayerMovement : MonoBehaviour
{
    public float speed = 6.0f;  // ????????
    public float mouseSensitivity = 1.0f;  // ??????????
    public Transform playerCamera;  // ??????????

    public bool moveAllowed = true;
    public bool turnAllowed = true;

    private float rotationX = 0.0f;  // X??????????
    private Vector3 lastPosition;  // ??????????????
    public float totalDistanceMoved = 0.0f;  // ????????????

    public AudioClip walkingClip;  // ??????????
    private AudioSource audioSource;  // ??????????????
    private bool isWalking = false;  // ??????????????????

    void Start()
    {
        UnityServices.InitializeAsync();  // ?????? Unity ????
        lastPosition = transform.position;  // ??????????????????????????????

        // ?????? AudioSource
        audioSource = gameObject.AddComponent<AudioSource>();
        audioSource.clip = walkingClip;
        audioSource.loop = true;  // ??????????????
        audioSource.volume = 0.5f;  // ??????????????????????????
    }

    void Update()
    {
        if (moveAllowed)
        {
            // ????????
            float moveX = Input.GetAxis("Horizontal");
            float moveZ = Input.GetAxis("Vertical");

            // ????????????
            Vector3 move = transform.right * moveX + transform.forward * moveZ;
            CharacterController controller = GetComponent<CharacterController>();
            controller.Move(move * speed * Time.deltaTime);

            // ??????????????????????????
            bool isCurrentlyWalking = moveX != 0 || moveZ != 0;
            if (isCurrentlyWalking && !isWalking)
            {
                audioSource.Play();  // ??????????????
                isWalking = true;
            }
            else if (!isCurrentlyWalking && isWalking)
            {
                audioSource.Stop();  // ??????????????
                isWalking = false;
            }

            // ????????????
            CalculateDistanceMoved();
        }

        if (turnAllowed)
        {
            // ??????????
            float mouseX = Input.GetAxis("Mouse X") * mouseSensitivity;
            float mouseY = Input.GetAxis("Mouse Y") * mouseSensitivity;

            rotationX -= mouseY;
            rotationX = Mathf.Clamp(rotationX, -90f, 90f);

            playerCamera.localRotation = Quaternion.Euler(rotationX, 0, 0);
            transform.Rotate(Vector3.up * mouseX);
        }
    }

    // ??????????????????
    void CalculateDistanceMoved()
    {
        float distanceThisFrame = Vector3.Distance(transform.position, lastPosition);
        totalDistanceMoved += distanceThisFrame;
        lastPosition = transform.position;
    }
}
